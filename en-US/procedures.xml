<chapter id="_runbook_procedures">
<title>Runbook Procedures</title>
<section id="_build_and_run_a_development_installation">
<title>Build and run a development installation</title>
<simpara>These steps install numerous dependencies required
to build and run a development installation of Eureka Streams.
This procedure is based on the instructions at
<ulink url="http://www.eurekastreams.org/build-and-run/">http://www.eurekastreams.org/build-and-run/</ulink>.</simpara>
<blockquote>
<title>Developer Build Only</title>
<attribution>
<citetitle>http://www.eurekastreams.org/build-and-run</citetitle>
</attribution>
<simpara>This guide provides the basic information for getting
Eureka Streams compiled and built in a local environment
to be run.  The steps provided in this guide are for
building a developerâ€™s version of Eureka Streams only.
A number of additional configuration options are available
for more sophisticated builds for Eureka Streams to run
in an enterprise environment.  Do not use these build
commands to build to a production environment.</simpara>
</blockquote>
<section id="_set_selinux_to_not_enforce_security">
<title>Set SELinux to not enforce security</title>
<simpara>For now, set SELinux to permissive mode. After Eureka Streams is up and
running, we can worry about implementing an SELinux policy
or otherwise securing the apps. Until it&#8217;s running, there
is no sense in obscuring application or build issues with
strong security. Remember, this initial installation is <emphasis>not suitable
for production use</emphasis>.</simpara>
<orderedlist numeration="arabic">
<listitem>
<simpara>
As root, modify <literal>/etc/sysconfig/selinux</literal> to read:
</simpara>
<screen># This file controls the state of SELinux on the system.
# SELINUX= can take one of these three values:
#   enforcing - SELinux security policy is enforced.
#   permissive - SELinux prints warnings instead of enforcing.
#   disabled - SELinux is fully disabled.
SELINUX=permissive
# SELINUXTYPE= type of policy in use. Possible values are:
#   targeted - Only targeted network daemons are protected.
#   strict - Full SELinux protection.
SELINUXTYPE=targeted</screen>
</listitem>
<listitem>
<simpara>
As <literal>root</literal>, set permissive mode
</simpara>
<screen>setenforce 0</screen>
</listitem>
</orderedlist>
<warning><simpara>SELinux should be enabled and restricted on production servers.
This step is only for use during initial testing.</simpara></warning>
</section>
<section id="_install_prerequisite_packages">
<title>Install prerequisite packages</title>
<simpara>These steps use <literal>sudo</literal> to run commands as <literal>root</literal>.
You could also run <literal>sudo -i</literal> to become <literal>root</literal>.</simpara>
<orderedlist numeration="arabic">
<listitem>
<simpara>
Install <literal>memcached</literal>
</simpara>
<screen>sudo yum -y install memcached
sudo /sbin/service memcached start
sudo /sbin/chkconfig memcached on</screen>
</listitem>
<listitem>
<simpara>
Install Git
</simpara>
<screen>sudo yum -y install git-all</screen>
</listitem>
<listitem>
<simpara>
Install Postgres client and server
</simpara>
<orderedlist numeration="loweralpha">
<listitem>
<simpara>
Install required packages
</simpara>
<screen>sudo yum -y install postgresql postgresql-server</screen>
</listitem>
<listitem>
<simpara>
Adjust authentication requirements
</simpara>
<screen>file=/var/lib/pgsql/data/pg_hba.conf
sudo sed -i 's/\(^[^#].*\)ident sameuser/\1 trust sameuser/' $file</screen>
</listitem>
<listitem>
<simpara>
Start the database
</simpara>
<screen>sudo /sbin/service postgresql initdb
sudo /sbin/service postgresql start
sudo /sbin/chkconfig postgresql on</screen>
</listitem>
</orderedlist>
</listitem>
<listitem>
<simpara>
Install Java from <ulink url="http://www.java.com/en">http://www.java.com/en</ulink>
</simpara>
</listitem>
<listitem>
<simpara>
Your web browser needs the Adobe Flash plugin to fully
use Eureka Streams. See <ulink url="http://fedoraproject.org/wiki/Flash">http://fedoraproject.org/wiki/Flash</ulink>
for instructions on installing the Flash plugin.
</simpara>
</listitem>
</orderedlist>
</section>
<section id="_install_and_configure_maven">
<title>Install and configure Maven</title>
<simpara>These steps install Maven2 using the binary distribution
from the Apache web site.</simpara>
<orderedlist numeration="arabic">
<listitem>
<simpara>
Download Maven2
</simpara>
<orderedlist numeration="loweralpha">
<listitem>
<simpara>
Open <ulink url="http://maven.apache.org/download.html">http://maven.apache.org/download.html</ulink> in your browser
</simpara>
</listitem>
<listitem>
<simpara>
Click on the link for the current version of Maven2 to
see a list of download mirrors
</simpara>
</listitem>
<listitem>
<simpara>
The top of the page suggests a mirror based on your IP
</simpara>
</listitem>
<listitem>
<simpara>
Download the tarball using your browser, <literal>curl</literal>, or <literal>wget</literal>
</simpara>
<screen>url=http://apache.inetbridge.net/maven/binaries/apache-maven-2.2.1-bin.tar.gz
wget -P /tmp $url</screen>
</listitem>
<listitem>
<simpara>
List the contents of the tarball
</simpara>
<screen>tar tzf apache-maven-2.2.1-bin.tar.gz</screen>
<simpara>With my download, the tarball contains:</simpara>
<screen>apache-maven-2.2.1/boot/classworlds-1.1.jar
apache-maven-2.2.1/LICENSE.txt
apache-maven-2.2.1/NOTICE.txt
apache-maven-2.2.1/README.txt
apache-maven-2.2.1/bin/m2.conf
apache-maven-2.2.1/bin/mvn.bat
apache-maven-2.2.1/bin/mvnDebug.bat
apache-maven-2.2.1/bin/mvn
apache-maven-2.2.1/bin/mvnDebug
apache-maven-2.2.1/conf/
apache-maven-2.2.1/conf/settings.xml
apache-maven-2.2.1/lib/maven-2.2.1-uber.jar</screen>
</listitem>
<listitem>
<simpara>
Optionally, download the PDF documentation for offline viewing
</simpara>
<screen>url=http://maven.apache.org/apache-maven.pdf
wget -P ~/ $url</screen>
</listitem>
</orderedlist>
</listitem>
<listitem>
<simpara>
Extract the tarball into <literal>/usr/local</literal>
</simpara>
<orderedlist numeration="loweralpha">
<listitem>
<simpara>
Become <literal>root</literal>
</simpara>
<screen>sudo -i</screen>
<note><simpara>If you have not setup <literal>/etc/sudoers</literal>, use <literal>su -</literal></simpara></note>
</listitem>
<listitem>
<simpara>
Extract the tarball
</simpara>
<screen>dest=/usr/local
src=/tmp/apache-maven-2.2.1-bin.tar.gz
tar xvzf $src -C $dest</screen>
</listitem>
</orderedlist>
</listitem>
<listitem>
<simpara>
Update the <literal>$PATH</literal> environment variable
</simpara>
<orderedlist numeration="loweralpha">
<listitem>
<simpara>
As <literal>root</literal>, create <literal>/etc/profile.d/apache-maven.sh</literal>
</simpara>
<screen># add extra paths to PATH environment var
export M2_HOME=/usr/local/apache-maven-2.2.1
export M2=$M2_HOME/bin
paths="
$M2
"
for path in ${paths}; do
  if ! echo ${PATH//:/\\n} | /bin/egrep "^${path}$" ; then
    PATH=${PATH}:${path}
  fi
done

# optionally set maven options
#MAVEN_OPTS="-Xms256m -Xmx512m"</screen>
</listitem>
<listitem>
<simpara>
As yourself, source the new path and confirm there are no typos
</simpara>
<screen>. /etc/profile.d/apache-maven.sh
echo $M2_HOME
echo $M2
echo $PATH
which mvn</screen>
</listitem>
</orderedlist>
</listitem>
<listitem>
<simpara>
Update <literal>$JAVA_HOME</literal>
</simpara>
<orderedlist numeration="loweralpha">
<listitem>
<simpara>
Determine which Java your system is using
</simpara>
<screen>alternatives --config java</screen>
<simpara>This will display something similar to:</simpara>
<screen>There are 4 programs which provide 'java'.

  Selection    Command
 -----------------------------------------------
   1           /usr/lib/jvm/jre-1.6.0-openjdk/bin/java
   2           /usr/lib/jvm/jre-1.5.0-gcj/bin/java
   3           /usr/java/jre1.6.0_16/bin/java
*+ 4           /usr/java/latest/bin/java

Enter to keep the current selection[+], or type selection number:</screen>
<simpara>Press <literal>Enter</literal> to avoid changes.</simpara>
</listitem>
<listitem>
<simpara>
As <literal>root</literal>, create <literal>/etc/profile.d/java-home.sh</literal>
</simpara>
<screen>_java=$(readlink /etc/alternatives/java)
export JAVA_HOME=${_java%%bin*}
export PATH=$PATH:$JAVA_HOME/bin</screen>
</listitem>
<listitem>
<simpara>
Source the above file and confirm <literal>JAVA_HOME</literal>
is correctly set
</simpara>
<screen>. /etc/profile.d/java-home.sh
echo $JAVA_HOME</screen>
</listitem>
</orderedlist>
</listitem>
<listitem>
<simpara>
Optionally, create <literal>~/.m2/settings.xml</literal> per <ulink url="http://maven.apache.org/settings.html">http://maven.apache.org/settings.html</ulink>
</simpara>
</listitem>
</orderedlist>
</section>
<section id="_retrieve_source_code_for_eureka_streams">
<title>Retrieve source code for Eureka Streams</title>
<simpara>These steps use <literal>git</literal> to clone the Eureka Streams source code
from Github.</simpara>
<orderedlist numeration="arabic">
<listitem>
<simpara>
Become <literal>root</literal> with a login shell
</simpara>
<screen>sudo -i</screen>
</listitem>
<listitem>
<simpara>
Clone the repo to an appropriate location
</simpara>
<screen>pushd /opt
git clone http://github.com/lmco/eurekastreams.git
popd</screen>
</listitem>
</orderedlist>
</section>
<section id="_install_maven_dependencies">
<title>Install Maven dependencies</title>
<simpara>These steps install the Apache Shindig Social Connector using
the source from the Eureka Streams repository.
Eureka Streams depends on a specific version of Shindig
that is currently unavailable in the Apache public repository.</simpara>
<note><simpara>These steps assume you are still logged in as <literal>root</literal>.
If you have the electronic copy of this document, simply copy
and paste.</simpara></note>
<orderedlist numeration="arabic">
<listitem>
<simpara>
Change into the top level directory of the Eureka Streams local repo:
</simpara>
<screen>cd /opt/eurekastreams</screen>
</listitem>
<listitem>
<simpara>
Install Shindig
</simpara>
<important><simpara>Your development workstation must be able to access the
Internet for these steps to succeed.</simpara></important>
<orderedlist numeration="loweralpha">
<listitem>
<simpara>
Common components
</simpara>
<screen>mvn install:install-file -Dfile=lib/shindig-common-3.3.jar \
        -DgroupId=org.apache.shindig \
        -DartifactId=shindig-common -Dversion=3.3 \
        -Dpackaging=jar -DgeneratePom=true</screen>
<simpara>The above command will download components from the Internet,
install components, and report its final status:</simpara>
<screen>[INFO] ------------------------------------------------------------------------
[INFO] BUILD SUCCESSFUL
[INFO] ------------------------------------------------------------------------
[INFO] Total time: 45 seconds
[INFO] Finished at: Fri Aug 13 15:48:10 EDT 2010
[INFO] Final Memory: 6M/54M
[INFO] ------------------------------------------------------------------------</screen>
</listitem>
<listitem>
<simpara>
Features
</simpara>
<screen>mvn install:install-file -Dfile=lib/shindig-features-3.3.jar \
        -DgroupId=org.apache.shindig \
        -DartifactId=shindig-features -Dversion=3.3 \
        -Dpackaging=jar -DgeneratePom=true</screen>
<simpara>The above command will download components from the Internet,
install components, and report its final status:</simpara>
<screen>[INFO] ------------------------------------------------------------------------
[INFO] BUILD SUCCESSFUL
[INFO] ------------------------------------------------------------------------
[INFO] Total time: 1 second
[INFO] Finished at: Fri Aug 13 15:50:53 EDT 2010
[INFO] Final Memory: 5M/52M
[INFO] ------------------------------------------------------------------------</screen>
</listitem>
<listitem>
<simpara>
Gadgets
</simpara>
<screen>mvn install:install-file -Dfile=lib/shindig-gadgets-3.3.jar \
        -DgroupId=org.apache.shindig \
        -DartifactId=shindig-gadgets -Dversion=3.3 \
        -Dpackaging=jar -DgeneratePom=true</screen>
<simpara>The above command will download components from the Internet,
install components, and report its final status:</simpara>
<screen>[INFO] ------------------------------------------------------------------------
[INFO] BUILD SUCCESSFUL
[INFO] ------------------------------------------------------------------------
[INFO] Total time: 1 second
[INFO] Finished at: Fri Aug 13 15:52:23 EDT 2010
[INFO] Final Memory: 5M/53M
[INFO] ------------------------------------------------------------------------</screen>
</listitem>
<listitem>
<simpara>
Server
</simpara>
<screen>mvn install:install-file -Dfile=lib/shindig-server-3.3.war \
        -DgroupId=org.apache.shindig \
        -DartifactId=shindig-server -Dversion=3.3 \
        -Dpackaging=war -DgeneratePom=true</screen>
<simpara>The above command will download components from the Internet,
install components, and report its final status:</simpara>
<screen>[INFO] ------------------------------------------------------------------------
[INFO] BUILD SUCCESSFUL
[INFO] ------------------------------------------------------------------------
[INFO] Total time: 1 second
[INFO] Finished at: Fri Aug 13 15:53:03 EDT 2010
[INFO] Final Memory: 5M/53M
[INFO] ------------------------------------------------------------------------</screen>
</listitem>
<listitem>
<simpara>
Social API
</simpara>
<screen>mvn install:install-file -Dfile=lib/shindig-social-api-3.3.jar \
        -DgroupId=org.apache.shindig \
        -DartifactId=shindig-social-api -Dversion=3.3 \
        -Dpackaging=jar -DgeneratePom=true</screen>
<simpara>The above command will download components from the Internet,
install components, and report its final status:</simpara>
<screen>[INFO] ------------------------------------------------------------------------
[INFO] BUILD SUCCESSFUL
[INFO] ------------------------------------------------------------------------
[INFO] Total time: 1 second
[INFO] Finished at: Fri Aug 13 15:53:57 EDT 2010
[INFO] Final Memory: 5M/53M
[INFO] ------------------------------------------------------------------------</screen>
</listitem>
<listitem>
<simpara>
Common
</simpara>
<screen>mvn install:install-file -Dfile=lib/shindig-common-3.3-tests.jar \
        -DgroupId=org.apache.shindig \
        -DartifactId=shindig-common -Dversion=3.3 \
        -Dpackaging=test-jar -DgeneratePom=true</screen>
<simpara>The above command will download components from the Internet,
install components, and report its final status:</simpara>
<screen>[INFO] ------------------------------------------------------------------------
[INFO] BUILD SUCCESSFUL
[INFO] ------------------------------------------------------------------------
[INFO] Total time: 1 second
[INFO] Finished at: Fri Aug 13 15:54:31 EDT 2010
[INFO] Final Memory: 5M/53M
[INFO] ------------------------------------------------------------------------</screen>
</listitem>
<listitem>
<simpara>
GWT DND
</simpara>
<screen>mvn install:install-file -Dfile=lib/gwt-dnd-2.6.5.2.jar \
        -DgroupId=com.google.code.gwt-dnd \
        -DartifactId=gwt-dnd -Dversion=2.6.5.2 \
        -Dpackaging=jar -DgeneratePom=true</screen>
<simpara>The above command will download components from the Internet,
install components, and report its final status:</simpara>
<screen>[INFO] ------------------------------------------------------------------------
[INFO] BUILD SUCCESSFUL
[INFO] ------------------------------------------------------------------------
[INFO] Total time: 1 second
[INFO] Finished at: Fri Aug 13 15:55:09 EDT 2010
[INFO] Final Memory: 5M/53M
[INFO] ------------------------------------------------------------------------</screen>
</listitem>
<listitem>
<simpara>
Carousel
</simpara>
<screen>mvn install:install-file -Dfile=lib/carousel-0.6.1.jar \
        -DgroupId=com.gwtyuicarousel \
        -DartifactId=carousel -Dversion=0.6.1 \
        -Dpackaging=jar -DgeneratePom=true</screen>
<simpara>The above command will download components from the Internet,
install components, and report its final status:</simpara>
<screen>[INFO] ------------------------------------------------------------------------
[INFO] BUILD SUCCESSFUL
[INFO] ------------------------------------------------------------------------
[INFO] Total time: 1 second
[INFO] Finished at: Fri Aug 13 15:55:51 EDT 2010
[INFO] Final Memory: 5M/53M
[INFO] ------------------------------------------------------------------------</screen>
</listitem>
<listitem>
<simpara>
URLrewrite
</simpara>
<screen>mvn install:install-file -Dfile=lib/urlrewrite-3.2.0-beta.jar \
        -DgroupId=org.tuckey \
        -DartifactId=urlrewrite -Dversion=3.2.0-beta \
        -Dpackaging=jar -DgeneratePom=true</screen>
<simpara>The above command will download components from the Internet,
install components, and report its final status:</simpara>
<screen>[INFO] ------------------------------------------------------------------------
[INFO] BUILD SUCCESSFUL
[INFO] ------------------------------------------------------------------------
[INFO] Total time: &lt; 1 second
[INFO] Finished at: Fri Aug 13 15:56:39 EDT 2010
[INFO] Final Memory: 5M/53M
[INFO] ------------------------------------------------------------------------</screen>
</listitem>
</orderedlist>
</listitem>
</orderedlist>
</section>
<section id="_compile_eureka_streams">
<title>Compile Eureka Streams</title>
<simpara>These steps compile the Eureka Streams source code and install binaries.</simpara>
<orderedlist numeration="arabic">
<listitem>
<simpara>
Define some preferences
</simpara>
<orderedlist numeration="loweralpha">
<listitem>
<simpara>
Create <literal>/opt/eurekastreams/myprefs.sh</literal>
</simpara>
<screen>dbserver=127.0.0.1
dbname=eurekastreams
dbuser=eruekastreams
export WEBPORT=80
export GRWEBPORT=8080
lucene_indexdir=/opt/lucene/index
lucene_sourcedir=/opt/lucene/source
cache="localhost:11211"
baseurl="http://$(hostname):$WEBPORT"
grbaseurl="http://$(hostname):$GRWEBPORT"</screen>
</listitem>
<listitem>
<simpara>
Check the file into Git
</simpara>
<screen>pushd /opt/eurekastreams
git add myprefs.sh
git commit -m 'save my preferences'</screen>
</listitem>
<listitem>
<simpara>
Source the above file and make directories
</simpara>
<screen>source /opt/eurekastreams/myprefs.sh
mkdir -p $lucene_indexdir
mkdir -p $lucene_sourcedir</screen>
</listitem>
</orderedlist>
</listitem>
<listitem>
<simpara>
Compile the application and test suite
</simpara>
<note><simpara>Optionally, append <literal>-DskipTests</literal> to avoid creating the test suite.</simpara></note>
<screen>. /opt/eurekastreams/myprefs.sh
mvn clean install -Dopenaccess-security        \
        -Dbuild.db.dbname=$dbname                  \
        -Dbuild.db.dbuser=$dbuser                  \
        -Dbuild.web.baseurl=$baseurl               \
        -Dbuild.web.grbaseurl=$grbaseurl           \
        -Dbuild.db.servername=$dbserver            \
        -Dbuild.lucene.indexdir=$lucene_indexdir   \
        -Dbuild.lucene.sourcedir=$lucene_sourcedir \
        -Dbuild.cache.servernames=$cache</screen>
<simpara>The above command will take a while to complete.
When it does finish, you should see output
such as:</simpara>
<screen>[INFO]
[INFO]
[INFO] ------------------------------------------------------------------------
[INFO] Reactor Summary:
[INFO] ------------------------------------------------------------------------
[INFO] Eureka Streams Parent ................................. SUCCESS [2:41.986s]
[INFO] Eureka Streams Server ................................. SUCCESS [8:03.509s]
[INFO] Eureka Streams Shared Resources ....................... SUCCESS [53.290s]
[INFO] Eureka Streams Task Queue Processor ................... SUCCESS [1:16.774s]
[INFO] Eureka Streams Database Resources ..................... SUCCESS [0.579s]
[INFO] Eureka Streams Web .................................... SUCCESS [6:07.956s]
[INFO] ------------------------------------------------------------------------
[INFO] ------------------------------------------------------------------------
[INFO] BUILD SUCCESSFUL
[INFO] ------------------------------------------------------------------------
[INFO] Total time: 19 minutes 4 seconds
[INFO] Finished at: Sun Aug 15 11:09:27 EDT 2010
[INFO] Final Memory: 94M/251M
[INFO] ------------------------------------------------------------------------</screen>
</listitem>
</orderedlist>
</section>
<section id="_build_database">
<title>Build database</title>
<simpara>These steps setup a Postgres database for Eureka Streams.
You should be <literal>root</literal> for the following steps unless
otherwise stated.</simpara>
<orderedlist numeration="arabic">
<listitem>
<simpara>
Create a <literal>eurekastreams</literal> user
</simpara>
<screen>username=eurekastreams
password=somepassword
useradd -r -m -d /home/$username
echo $password | passwd --stdin $username</screen>
</listitem>
<listitem>
<simpara>
Confirm Postgres installation
</simpara>
<orderedlist numeration="loweralpha">
<listitem>
<simpara>
Ensure Postgress authentication is correctly set
in <literal>/var/lib/pgsql/data/pg_hba.conf</literal>:
</simpara>
<screen># TYPE  DATABASE    USER        CIDR-ADDRESS      METHOD

# "local" is for Unix domain socket connections only
local   all         all                           trust sameuser
# IPv4 local connections:
host    all         all         127.0.0.1/32      trust sameuser
# IPv6 local connections:
host    all         all         ::1/128           trust sameuser</screen>
</listitem>
<listitem>
<simpara>
Ensure Postgres is running
</simpara>
<screen>service postgresql status</screen>
<simpara>Example output:</simpara>
<screen>postmaster (pid 3063 3062 3061 3060 2994 2375) is running...</screen>
</listitem>
<listitem>
<simpara>
Ensure Postgres is running on the expected port
</simpara>
<screen>netstat -tulpn | grep postmaster</screen>
<simpara>Expected output:</simpara>
<screen>tcp  0  0 127.0.0.1:5432     0.0.0.0:*    LISTEN      2375/postmaster</screen>
<simpara>This shows that Postgres is listening on port 5432 of the loopback interface,
as expected.</simpara>
</listitem>
</orderedlist>
</listitem>
<listitem>
<simpara>
Create a Postgres database
</simpara>
<orderedlist numeration="loweralpha">
<listitem>
<simpara>
As <literal>root</literal>, become the <literal>postgres</literal> user and start the Postgres client
</simpara>
<screen>su - postgres
psql</screen>
</listitem>
<listitem>
<simpara>
At the <literal>psql</literal> prompt (looks like <literal>postgres=#</literal>), list existing databases
</simpara>
<screen>\l</screen>
<simpara>A default installation will probably reflect the following output:</simpara>
<screen>          List of databases
      Name      |  Owner   | Encoding
 ---------------+----------+----------
  postgres      | postgres | UTF8
  template0     | postgres | UTF8
  template1     | postgres | UTF8
 (4 rows)</screen>
</listitem>
<listitem>
<simpara>
Create a database as specified in <literal>/opt/eurekastreams/myprefs.sh</literal>
</simpara>
<screen>CREATE DATABASE eurekastreams;</screen>
<simpara>Postgres should respond with <literal>CREATE DATABASE</literal> to indicate success.</simpara>
</listitem>
</orderedlist>
</listitem>
<listitem>
<simpara>
Create a Postgres user and password
</simpara>
<orderedlist numeration="loweralpha">
<listitem>
<simpara>
At the <literal>psql</literal> prompt (looks like <literal>postgres=#</literal>), list existing users
</simpara>
<screen>\du</screen>
<simpara>The above command should show output similar to the following for a fresh installation:</simpara>
<screen>                               List of roles
  Role name | Superuser | Create role | Create DB | Connections | Member of
 -----------+-----------+-------------+-----------+-------------+-----------
  postgres  | yes       | yes         | yes       | no limit    | {}
 (1 row)</screen>
</listitem>
<listitem>
<simpara>
Create the user as defined in <literal>/opt/eurekastreams/myprefs.sh</literal>
</simpara>
<screen>CREATE USER eurekastreams WITH PASSWORD 'somepassword' CREATEDB SUPERUSER;</screen>
<simpara>Postgres should respond with <literal>CREATE ROLE</literal> to indicate success.</simpara>
</listitem>
<listitem>
<simpara>
Grant privileges to the <literal>eurekastreams</literal> user
</simpara>
<screen>GRANT ALL PRIVILEGES ON DATABASE eurekastreams to eurekastreams;</screen>
<simpara>Postgres should respond with <literal>GRANT</literal> to indicate success.</simpara>
</listitem>
<listitem>
<simpara>
Quit <literal>psql</literal>
</simpara>
<screen>\q</screen>
</listitem>
</orderedlist>
</listitem>
<listitem>
<simpara>
Fix the database scripts
</simpara>
<screen>cd /opt/eurekastreams/web/target/classes/db/scripts
files="dev_reset_db.sh dev_apply_updates.sh"
for file in $files; do
  sed -i 's/scripts\$/scripts/g' $file
done</screen>
</listitem>
<listitem>
<simpara>
Populate the database
</simpara>
<orderedlist numeration="loweralpha">
<listitem>
<simpara>
Become the <literal>eurekastreams</literal> user
</simpara>
<screen>su - eurekastreams</screen>
</listitem>
<listitem>
<simpara>
As the <literal>eurekastreams</literal> user, run the scripts to populate the database
</simpara>
<important><simpara>The SQL scripts use syntax specific to PostgreSQL 8.4.
See the relevant appendix for details.</simpara></important>
<screen>. /opt/eurekastreams/myprefs
pushd /opt/eurekastreams/web/target/classes/db/scripts
./dev_reset_db.sh $dbname $dbuser localhost</screen>
</listitem>
</orderedlist>
</listitem>
</orderedlist>
</section>
<section id="_configure_netfilter">
<title>Configure NetFilter</title>
<simpara>These steps ensure the Linux host-based firewall
allows web-based traffic to reach Eureka Streams.
These steps must be performed as <literal>root</literal>.</simpara>
<note><simpara>If you do not want to protect your machine,
simply run <literal>service iptables stop</literal> to flush all
firewall rules.</simpara></note>
<orderedlist numeration="arabic">
<listitem>
<simpara>
Modify <literal>/etc/sysconfig/iptables</literal>
</simpara>
<orderedlist numeration="loweralpha">
<listitem>
<simpara>
Ensure the first rule in the <literal>INPUT</literal> chain is:
</simpara>
<screen>-A INPUT -m state --state ESTABLISHED,RELATED -j ACCEPT</screen>
<simpara>This accepts packets that are already in the stateful
connection tracking table.</simpara>
</listitem>
<listitem>
<simpara>
Add these lines before any <literal>DROP</literal> or <literal>REJECT</literal> rules:
</simpara>
<screen>-A INPUT -m state --state NEW -m tcp -p tcp --dport 80   -j ACCEPT
-A INPUT -m state --state NEW -m tcp -p tcp --dport 8080 -j ACCEPT</screen>
<simpara>These rules allow the TCP three-way handshake to the specified ports.
These ports should correspond to the ports listed
in <literal>/opt/eurekastreams/myprefs.sh</literal>.</simpara>
</listitem>
<listitem>
<simpara>
The final set of rules may resemble this complete file:
</simpara>
<screen># Firewall configuration written by system-config-firewall
# Manual customization of this file is not recommended.
*filter
:INPUT ACCEPT [0:0]
:FORWARD ACCEPT [0:0]
:OUTPUT ACCEPT [0:0]
-A INPUT -m state --state ESTABLISHED,RELATED -j ACCEPT
-A INPUT -p icmp -j ACCEPT
-A INPUT -i lo -j ACCEPT
-A INPUT -m state --state NEW -m tcp -p tcp --dport 22 -j ACCEPT
-A INPUT -m state --state NEW -m tcp -p tcp --dport 25 -j ACCEPT
-A INPUT -m state --state NEW -m tcp -p tcp --dport 80 -j ACCEPT
-A INPUT -m state --state NEW -m tcp -p tcp --dport 8080 -j ACCEPT
-A INPUT -m state --state NEW -m tcp -p tcp --dport 443 -j ACCEPT
-I FORWARD -m physdev --physdev-is-bridged -j ACCEPT
-A INPUT -j REJECT --reject-with icmp-host-prohibited
-A FORWARD -j REJECT --reject-with icmp-host-prohibited
COMMIT</screen>
</listitem>
<listitem>
<simpara>
Save the file
</simpara>
</listitem>
</orderedlist>
</listitem>
<listitem>
<simpara>
Reload the rules into the kernel
</simpara>
<screen>service iptables restart</screen>
</listitem>
</orderedlist>
</section>
<section id="_run_eureka_streams">
<title>Run Eureka Streams</title>
<simpara>These steps use Jetty to run Eureka Streams.</simpara>
<orderedlist numeration="arabic">
<listitem>
<simpara>
Ensure nothing is currently bound to the ports specified
in <literal>/opt/eurekastreams/myprefs.sh</literal>
</simpara>
<orderedlist numeration="loweralpha">
<listitem>
<simpara>
Use <literal>netstat</literal> to show listeners
</simpara>
<screen>. /opt/eurekastreams/myprefs.sh
netstat -tulpn | egrep ":($WEBPORT|$GRWEBPORT)"</screen>
</listitem>
<listitem>
<simpara>
If <literal>httpd</literal> is listening on the port, shut it down
</simpara>
<screen>service httpd stop</screen>
</listitem>
</orderedlist>
</listitem>
<listitem>
<simpara>
Update <literal>/usr/local/apache-maven-*/conf/settings.xml</literal> to include
the <literal>pluginGroup</literal> for the Jetty plugin:
</simpara>
<screen>...
  &lt;pluginGroups&gt;
    &lt;!-- pluginGroup
     | Specifies a further group identifier to use for plugin lookup.
    &lt;pluginGroup&gt;com.your.plugins&lt;/pluginGroup&gt;
    --&gt;
    &lt;pluginGroup&gt;org.mortbay.jetty&lt;/pluginGroup&gt;
  &lt;/pluginGroups&gt;
...</screen>
<simpara>In the above example, just add <literal>&lt;pluginGroup&gt;org.mortbay.jetty&lt;/pluginGroup&gt;</literal>
within the existing <literal>pluginGroups</literal> XML tag.</simpara>
</listitem>
<listitem>
<simpara>
Change to the project&#8217;s web directory
</simpara>
<screen>cd /opt/eurekastreams/web</screen>
</listitem>
<listitem>
<simpara>
Start Eureka Streams
</simpara>
<screen>. /opt/eurekastreams/myprefs.sh

mvn jetty:run -DskipTests         \
    -Dlog.home=$HOME/logs         \
    -Denv.WEBPORT=$WEBPORT        \
    -Denv.GRWEBPORT=$GRWEBPORT</screen>
</listitem>
<listitem>
<simpara>
Use your favorite web browser to view the site
as specified in <literal>$baseurl</literal> of <literal>/opt/eurekastreams/myprefs.sh</literal>.
The default username is <literal>sysadmin</literal> with an empty password.
</simpara>
</listitem>
</orderedlist>
</section>
</section>
<section id="_build_and_install_an_rpm_for_production_use">
<title>Build and install an RPM for production use</title>
<simpara>stub text</simpara>
</section>
</chapter>
